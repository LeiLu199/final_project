Help on strategy in module portfolioFactory.strategy.strategy object:

class ssttrraatteeggyy(__builtin__.object)
 |  Strategy is a class to represent investment strategies. 
 |  
 |  This class contains returns generated by the strategy and associated metadata.
 |  
 |  A strategy is defined by:
 |      - the investment universe on which the strategy is defined
 |      - the signal used to make investment decisions (user supplied)
 |      - the selection rule which defines which investments to buy based on the signal 
 |      - these 3 components are used to generate the value of that
 |      
 |  
 |  Public Attributes:
 |      Data attributes:
 |      - signal: dataframe containing the signal used to select stocks (example: rolling returns)
 |      - selection: dataframe of zeros and ones to identify the selected investments
 |      - weights: dataframe containing the weights allocated to each selected investment
 |      - strategy: dataframe with the value of each investment and the total value ('value')
 |      - parameters: dictionary containing metadata
 |      
 |      Parameters Dictionary:
 |      - universe: the name of universe object on which the strategy is defined
 |      - signalPath: path to pickled dataframe with signal data
 |      - rule: the cutoff point for selecting investments
 |      - window: size of window between rebalancing 
 |      
 |   Example Config File:
 |       name = Name of strategy  (string)
 |       signalPath = Path specifying location of signal data (string)
 |       rebalanceWindow = The number of period between rebalancing the investments (int)
 |       rule = The number of investments to buy in each period (int)
 |       
 |              If rule is positive --> Buy the top X investments based on the signal
 |              If rule is negative --> Buy the bottom X investments based on the signal
 |  
 |  Methods defined here:
 |  
 |  ____iinniitt____(self, universe, configPath)
 |      Method to intialize a strategy object
 |      
 |          1) Reads in parameters from configPath      
 |          2) Sets signal as attribute
 |          3) Selects investments based on signal and sets as attribute
 |          4) Calculates weights ands sets as attribute
 |          5) Calculates strategy values and sets as attribute
 |          
 |      Args:
 |          configPath (str): location of config file
 |          universe (universe): universe on which the strategy is defined
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  rreebbaallaanncciinnggPPrroocceedduurree(block, tickers)
 |      Method to perform the rebalancing procedure
 |      To be passed to an apply method on a grouped dataframe of returns and weights.
 |      Each group should represent one rebalancing window
 |      
 |      Args:
 |      - block (df) : A dataframe which is one piece of a grouped dataframe 
 |      - ticker (list) : a list of the tickers (column names) for all the possible investments
 |      
 |      Returns:
 |      - block (df): The original df with the value of each investment and the overall value of the strategy appended
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
